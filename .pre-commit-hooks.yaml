##
# Various
#
- id: typos
  name: typos spell check
  description: Source code spell checker
  entry: typos
  args: [--write-changes, --force-exclude]
  language: system
  types: ["text"]
  pass_filenames: true
  stages: [pre-commit, pre-merge-commit, pre-push, manual]
- id: committed
  name: committed
  description: Nitpicking commit history since beabf39
  language: system
  entry: committed
  args: [--fixup, --wip, --commit-file]
  stages: [commit-msg]
##
# Rust
#
# The file checked for most of the hooks are:
#
# - rust: for the rust source code
# - toml: Cargo or other configuration files
# - markdown: documentation that could be included with the #[doc] attribute
#
# This could cover more files than the ones actually used in the rust project (e.g. documentation
# outside of rustdoc, etc, etc), but this also means a recompilation shouldn't be necessary and the
# check should run fairly quickly.
#
# Check
- id: rust-fmt
  name: format rust
  description: Format files with cargo fmt.
  entry: cargo fmt
  language: system
  types: [rust]
  args: ["--"]
- id: rust-check
  name: check rust
  description: Check the package for errors.
  entry: cargo check
  args:
    ["--all-targets", "--all-features", "--workspace", "--", "-D", "warnings"]
  language: system
  types: [file]
  files: '\.(rs|toml|md)$|Cargo.lock$'
  pass_filenames: false
- id: rust-clippy
  name: check rust clippy
  description: Lint rust sources
  entry: cargo clippy
  language: system
  args:
    ["--all-targets", "--all-features", "--workspace", "--", "-D", "warnings"]
  types: [file]
  files: '\.(rs|toml|md)$|Cargo.lock$'
  pass_filenames: false
- id: rust-doc
  name: rust docs
  description: Build the documentation
  entry: env RUSTDOCFLAGS='--cfg docsrs -D warnings' cargo +nightly doc
  args: ["--no-deps", "--all-features", "--workspace"]
  types: [file]
  files: '\.(rs|toml|md)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-hack
  name: check each features
  description: Use cargo-hack to check each feature
  entry: cargo hack
  args: ["--each-feature", "--no-dev-deps", "--workspace", "check"]
  types: [file]
  files: '\.(rs|toml|md)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-hack-powerset
  name: check all features
  description: Use cargo-hack to check all features with clippy
  entry: cargo hack
  args: ["--feature-powerset", "--workspace", "check"]
  types: [file]
  files: '\.(rs|toml|md)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-sqlx
  name: check sqlx queries
  description: Check that the sqlx queries are up to date
  entry: cargo sqlx
  args: ["prepare", "--check"]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
# Test
- id: rust-test
  name: test rust
  description: Run the project test suite
  entry: cargo test
  args: ["--all-targets", "--all-features", "--workspace"]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-nextest
  name: nextest rust
  description: Run the project test suite with nextest
  entry: cargo nextest run
  args: ["--all-targets", "--all-features", "--workspace"]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-test-doc
  name: test rust doc
  description: Run the project test suite
  entry: cargo test --doc
  args: ["--all-features", "--workspace"]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-build
  name: build rust
  description: Build the project
  entry: cargo build
  args: ["--all-features", "--all-targets", "--workspace"]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
- id: rust-min-ver
  name: rust direct minimal versions
  description: Check the compatibility of the direct dependencies minimal versions
  entry: cargo minimal-versions
  args:
    [
      "check",
      "--workspace",
      "--ignore-private",
      "--detach-path-deps=skip-exact",
      "--direct",
    ]
  types: [file]
  files: '\.(rs|toml|md|sql)$|Cargo.lock$'
  language: system
  pass_filenames: false
##
# PHP
#
- id: php-cs-fixer
  name: format php
  description: Fix PHP Code Standard
  entry: vendor/bin/php-cs-fixer fix
  language: system
  types: [php]
  pass_filenames: true
- id: php-stan
  name: check php
  description: PHP Static Analysis
  entry: vendor/bin/phpstan analyse
  language: system
  types: [php]
  pass_filenames: true
##
# Nix
#
- id: nix-flake-check
  name: check nix flake
  description: Check the flake.nix file for errors
  entry: nix flake check
  language: system
  files: "^(flake\\.lock|.*\\.nix)$"
  types: [file]
  pass_filenames: false
- id: nix-nixpkgs-fmt
  name: format nix nixpkgs-fmt
  description: Format nix package with nixpkgs-fmt
  entry: nixpkgs-fmt
  language: system
  types: [nix]
  pass_filenames: true
- id: nix-nixfmt
  name: format nix nixfmt
  description: Format nix package with nixfmt
  entry: nixfmt
  args:
    - "--verify"
  language: system
  types: [nix]
  pass_filenames: true
- id: nix-alejandra
  name: format nix alejandra
  description: Format nix package with alejandra
  entry: alejandra
  language: system
  types: [nix]
  pass_filenames: true
- id: nix-statix
  name: check nix statix
  description: Link nix code with statix
  entry: statix check
  language: system
  types: [nix]
  pass_filenames: false
- id: nix-build
  name: nix build
  description: Build the package with nix
  entry: nix build
  language: system
  pass_filenames: false
##
# JavaScript/TypeScript
#
- id: js-yarn-run
  name: yarn run
  description: "Run a custom Yarn command"
  entry: yarn
  language: system
  types_or: [javascript, jsx, ts, tsx, json]
  pass_filenames: true
- id: js-yarn-run-filenames
  name: yarn run with filenames
  description: "Run a custom Yarn command, passing the filenames"
  entry: yarn
  language: system
  types_or: [javascript, jsx, ts, tsx, json]
  pass_filenames: true
##
# Lua
#
- id: lua-stylua
  name: format lua
  description: "Format Lua files with Stylua"
  entry: stylua
  types: [lua]
  language: system
  pass_filenames: true
- id: lua-check
  name: lua check
  description: "Static analysis for Lua code"
  entry: luacheck
  types: [lua]
  language: system
  pass_filenames: true
##
# Shell
#
- id: sh-check
  name: check shell
  description: "Check shell scripts with shellcheck"
  entry: shellcheck
  types_or: [shell, bash, sh]
  language: system
  pass_filenames: true
- id: sh-fmt
  name: format shell
  description: "Format shell scripts with shfmt"
  entry: shfmt
  types_or: [shell, bash, sh, zsh]
  language: system
  pass_filenames: true
- id: fish-fmt
  name: format fish
  description: "Format fish scripts with fish_indent"
  entry: fish_indent
  types: [fish]
  language: system
  pass_filenames: true
##
# Yaml
#
- id: yaml-fmt-prettier
  name: format yaml
  description: "Format yaml files with prettier"
  entry: prettier
  types: [yaml]
  language: system
  pass_filenames: true
##
# Markdown
#
- id: md-fmt-dprint
  name: format markdown
  description: "Format markdown files with dprint"
  entry: dprint
  args: ["fmt"]
  types: [markdown]
  language: system
  pass_filenames: true
###
# General formatters
#
- id: run-dprint
  name: run dprint
  description: "Format files with dprint"
  entry: dprint
  args: ["fmt"]
  language: system
  pass_filenames: true
- id: run-prettier
  name: run prettier
  description: "Format files with prettier"
  entry: prettier
  args: ["-w"]
  language: system
  pass_filenames: true
